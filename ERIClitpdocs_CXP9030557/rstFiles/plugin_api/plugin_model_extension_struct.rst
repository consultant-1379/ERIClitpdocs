.. |external| raw:: html

   <img alt="external" src="../_static/external_link_icon.svg">

.. _understanding-the-plugin-and-model-extension-structure:

======================================================
Understanding the Plugin and Model Extension Structure
======================================================

LITP Model Extensions and Plugins are delivered as separate items and are
packaged separately. Therefore, a piece of functionality that requires both a
Plugin to generate tasks and Model Extension would be delivered as two RPM
files.

LITP Plugins and Model Extensions deliver functionality in the form of Python
modules that implement extensions of base classes present in the core of LITP.
These classes need to be registered with the LITP service so they can be
loaded and used on the Management Server. Both Plugins and Model Extensions
should deliver unit tests. Plugins may additionally deliver Puppet modules.

Here is a tree view of the :ref:`sample-extension`'s directory structure::


        ERIClitpexampleapi                  -- repository root
        ├── ERIClitpexampleapi_CXP1234568   -- used by Maven, no source here
        ├── etc
        │   └── extensions              -- the extension's config file lives here
        ├── src
        │   └── example_extension           -- the extension's module(s) live here
        └── test                        -- the extension's unit tests live here

And here is a tree view of the :ref:`sample-plugin`'s directory structure::

        ERIClitpexample                     -- repository root
        ├── ats                         -- Acceptance Tests directory
        ├── ERIClitpexample_CXP1234567      -- used by Maven, no source here
        ├── etc
        │   └── plugins                 -- the plugin's config file lives here
        ├── puppet
        │   ├── README.txt              -- Mandatory file to include
        │   ├── mcollective_agents      -- MCollective agents directory
        │   │   └ files                    place any agent in files directory
        │   └── ntpd                    -- Puppet module directory
        │       ├── manifests
        │       └── templates
        ├── src
        │   └── example_plugin              -- the plugin's module(s) live here
        └── test                        -- the extension's unit tests live here
            └── test_ntp_plugin


As mentioned, both Model Extensions and Plugins must register themselves with
the LITP service. This is achieved by delivering a configuration (conf) file
to ``/opt/ericsson/nms/litp/etc``, which is used by LITP to locate the python
class that implements the Plugin or Model Extension. Further information on
the python modules delivered by a Plugin or Model Extension are available
in the following sections.


*The following example shows how a plugin would deliver a conf file
to '/opt/ericsspon/nms/litp/etc/plugins/ntp_plugin.conf':*

.. code-block:: ini

        [plugin]
        name=ntp_plugin
        class=ntp_plugin.ntp_plugin.NtpPlugin
        version=${project.version}


*This example shows how a model extension would deliver a conf file
to '/opt/ericsspon/nms/litp/etc/extensions/ntp_extension.conf':*

.. code-block:: ini

        [extension]
        name=ntp_extension
        class=ntp_extension.ntp_extension.NtpExtension
        version=${project.version}

.. note::
   Configuration files are generated by the Maven archetypes for Plugins and
   Model Extensions. Please see :doc:`../plugin_sdk/env_setup`.



